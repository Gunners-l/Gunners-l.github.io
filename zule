<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Para Zulema</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: #0d0d0d;
            cursor: pointer; /* Cambia el cursor para indicar que es interactivo */
        }
        #animation-canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="animation-canvas"></canvas>

    <script>
        const canvas = document.getElementById('animation-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const backgroundText = 'ZULEMA';
        const backgroundParticles = [];
        const explosionParticles = [];

        // --- Partículas de fondo (las que flotan) ---
        function BackgroundParticle(x, y) {
            this.x = x; this.y = y;
            this.vx = (Math.random() - 0.5) * 1; this.vy = (Math.random() - 0.5) * 1;
            this.size = Math.random() * 15 + 20;
            this.hue = Math.random() * 50 + 290; // Tonos rosa/morado
        }

        for (let i = 0; i < 30; i++) {
            backgroundParticles.push(new BackgroundParticle(Math.random() * canvas.width, Math.random() * canvas.height));
        }

        // --- Partículas de la explosión (las que aparecen al hacer clic) ---
        function ExplosionParticle(x, y) {
            this.x = x; this.y = y;
            const angle = Math.random() * Math.PI * 2; // Dirección aleatoria
            const speed = Math.random() * 4 + 1;       // Velocidad aleatoria
            this.vx = Math.cos(angle) * speed;
            this.vy = Math.sin(angle) * speed;
            this.size = Math.random() * 3 + 2;
            this.hue = Math.random() * 50 + 290;
            this.life = 100; // Vida de la partícula antes de desaparecer
        }

        function createExplosion(x, y) {
            for (let i = 0; i < 50; i++) { // Crear 50 partículas por explosión
                explosionParticles.push(new ExplosionParticle(x, y));
            }
        }

        // --- Bucle principal de animación ---
        function animate() {
            ctx.fillStyle = 'rgba(13, 13, 13, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Animar partículas de fondo
            backgroundParticles.forEach(p => {
                ctx.font = `bold ${p.size}px sans-serif`;
                ctx.fillStyle = `hsla(${p.hue}, 100%, 70%, 0.5)`;
                ctx.fillText(backgroundText, p.x, p.y);
                p.x += p.vx; p.y += p.vy;
                if (p.x > canvas.width + p.size * 4) p.x = -p.size * 4;
                if (p.x < -p.size * 4) p.x = canvas.width + p.size * 4;
                if (p.y > canvas.height + p.size) p.y = -p.size;
                if (p.y < -p.size) p.y = canvas.height + p.size;
            });

            // Animar partículas de la explosión
            for (let i = explosionParticles.length - 1; i >= 0; i--) {
                const p = explosionParticles[i];
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                ctx.fillStyle = `hsla(${p.hue}, 100%, 70%, ${p.life / 100})`;
                ctx.fill();
                p.x += p.vx; p.y += p.vy;
                p.life--;
                if (p.life <= 0) {
                    explosionParticles.splice(i, 1);
                }
            }

            requestAnimationFrame(animate);
        }

        // --- Eventos de Interacción ---
        canvas.addEventListener('mousedown', (e) => createExplosion(e.clientX, e.clientY));
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            for (let i = 0; i < e.touches.length; i++) {
                createExplosion(e.touches[i].clientX, e.touches[i].clientY);
            }
        });

        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        animate();
    </script>
</body>
</html>
